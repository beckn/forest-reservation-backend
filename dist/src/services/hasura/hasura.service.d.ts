import { LoggerService } from 'src/services/logger/logger.service';
export declare class HasuraService {
    private readonly logger;
    private hasuraUrl;
    private adminSecretKey;
    private dbName;
    constructor(logger: LoggerService);
    getProviderList(): Promise<any>;
    getProviderInfoById(id: any): Promise<any>;
    getSeekerInfoById(id: any): Promise<any>;
    getSeekerList(): Promise<any>;
    adminCreate(user: any): Promise<any>;
    createProviderUser(providerUser: any): Promise<any>;
    createSeekerUser(seeker: any): Promise<any>;
    createSeekerwithoutAuth(seeker: any): Promise<void>;
    updateapprovalStatus(id: any, user: any): Promise<any>;
    updateEnableStatus(id: any, user: any): Promise<any>;
    updatePassword(id: any, password: any): Promise<any>;
    isUserApproved(email: string): Promise<any>;
    createUser(user: any): Promise<any>;
    findOne(email: string): Promise<any>;
    createContent(id: any, createContentdto: any): Promise<any>;
    createContentBookmark(id: any, createContentdto: any): Promise<any>;
    removeBookmarkContent(id: any, seeker_id: any): Promise<any>;
    getContent(id: any): Promise<any>;
    getContentById(id: any, provider_id: any): Promise<any>;
    getFlnContentById(id: any): Promise<any>;
    editContent(id: any, createContentdto: any): Promise<any>;
    findContent1(getContentdto: any): Promise<any>;
    findContent(searchQuery: any): Promise<any>;
    findScholarshipContent(searchQuery: any): Promise<any>;
    deleteContent(id: any, provider_id: any): Promise<any>;
    findCollection(getCollectiondto: any): Promise<any>;
    createCollection(provider_id: any, body: any): Promise<any>;
    getCollection(provider_id: any): Promise<any>;
    getAllCollection(): Promise<any>;
    getCollectionContent(id: any): Promise<any>;
    updateCollection(id: any, provider_id: any, body: any): Promise<any>;
    deleteCollection(id: any, provider_id: any): Promise<any>;
    createContentCollection(body: any): Promise<any>;
    deleteContentCollection(id: any): Promise<any>;
    queryDb(query: string, variables?: Record<string, any>): Promise<any>;
    createBulkContent(id: any, createContentdto: any): Promise<any>;
    createBookmark(seeker_id: any, body: any): Promise<any>;
    getBookmark(seeker_id: any): Promise<any>;
    getBookmarkContent(id: any, seeker_id: any): Promise<any>;
    updateBookmark(id: any, seeker_id: any, body: any): Promise<any>;
    deleteBookmark(id: any, seeker_id: any): Promise<any>;
    addContentBookmark(body: any): Promise<any>;
    deleteContentBookmark(id: any, seeker_id: any): Promise<any>;
    createScholarship(provider_id: any, scholarship: any): Promise<any>;
    getScholarship(provider_id: any): Promise<any>;
    getScholarshipById(id: any, provider_id: any): Promise<any>;
    editScholarshipById(id: any, provider_id: any, scholarship: any): Promise<any>;
    findScholarship(getContentdto: any): Promise<any>;
    createConfig(user_id: any, body: any): Promise<any>;
    getConfig(user_id: any): Promise<any>;
    rateFlnContentById(content_id: any, ratingValue: any, feedback: any): Promise<any>;
    SubmitFeedback(description: any, id: any): Promise<any>;
    FindUserByEmail(email: any): Promise<any>;
    IsOrderExist(itemId: any, id: any): Promise<boolean>;
    GetOrderId(itemId: any, id: any): Promise<any>;
    GenerateOrderId(itemId: any, id: any, order_id: any): Promise<any>;
    getFlnContentByOrderId(order_id: any): Promise<any>;
    getImageUrl(imageId: string): Promise<any>;
    findClimateContent(filter: any): Promise<any>;
    findClimateContentById(id: any): Promise<any>;
}
